/*
    Clashing Coders RPG Platform - The platform used for Creamfinance's first coding contest.
    Copyright (C) 2016 Thomas Rosenstein

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var ArrayRule = Class.bind(null, 'ArrayRule', ValidationRule);

ArrayRule({
    constructor: function (fieldRules) {
        this.fieldRules = fieldRules;
    },
    validate: function (context, fullData, currentValue, callback) {
        var failed = false;

        if (!currentValue) {
            return callback(true);
        }

        if (!(currentValue instanceof Array)) {
            context.errors.push('Field must be an array.');
            return callback(false);
        }

        var ch = new CompletionHandler();
        var preWait = ch.wait('D');

        var doneCheck = function (done, result) {
            if (!result) {
                failed = true;
            }

            done();
        };

        for (var i = 0; i < currentValue.length; i++) {
            // create a new context for this field
            context.fields[i] = { errors: [], success: true, fields: {} };

            var target = currentValue[i];

            // validate each of the rules for the current field
            for (var x = 0; x < this.fieldRules.length; x++) {
                this.fieldRules[x].validate(
                    context.fields[i],
                    fullData,
                    target,
                    doneCheck.bind(this, ch.wait('D'))
                );
            }
        }

        ch.handle('D', function () {
            callback(!failed);
        });
        preWait();
    }
});
