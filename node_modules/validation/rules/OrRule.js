var OrRule = Class.bind(null, 'OrRule', ValidationRule);

var util = require('util');

OrRule({
    constructor: function (validation1, validation2) {
        var args = Array.prototype.slice.apply(arguments);

        this.validations = [];

        for (var i = 0; i < args.length; i++) {
            this.validations.push(new Validator(args[i]));
        }
    },
    validate: function (context, fullData, currentValue, callback) {
        var ch = new CompletionHandler();

        var results = [];
        var preWait = ch.wait('V');

        for (var i = 0; i < this.validations.length; i++) {
            var validation = this.validations[i];

            validation.validate(currentValue, function (done, context, result) {
                results.push([ context, result ]);

                done();
            }.bind(this, ch.wait('V')));
        }

        ch.handle('V', function () {
            for (var i = 0; i < results.length; i++) {
                if (results[i][1] == true) {
                    // validated successfully
                    callback(true);
                    return;
                }
            }

            context.errors.push(results);
            context.errors.push('Field must match one of the provided schemas');
            callback(false);
        });

        preWait();
    }
});